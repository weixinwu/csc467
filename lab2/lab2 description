/**********************************************************************
 *
 * --YOUR GROUP INFO SHOULD GO HERE Weixin Wu 1000667405 ShunKong Cheung 1000774263--
 *
 * todo:
 * 2) multiple index
 **********************************************************************/


We continued the lab code from lab1(Did not use Starter2)

Terminal "program" is the root of the parser tree, a program contains instructions.
There are different kinds of instructions, declaration, assignment, statement, loop and empty instructions.

In terms of token, there are precdence, and associative
Lower the rule, the higher the precendence
Left associatitivity vs. right associativity

The difficulty of this lab is to define each node of the parse tree.
For example, we defined condition before, later we realize condition is just a binary value,
at last we combine condition with expression. 



PROG 		-> { INSTRUCTIONS } 
INSTRUCTIONS 	-> INSTRUCTIONS INSTRUCTION
		-> empty
INSTRUCTION 	-> DECLARATION ;
  		-> ASSIGNMENTS;
		-> STATEMENT
		-> LOOP
		-> empty 
 		-> ;
VALUE		-> true false # id
TYPE		-> int bool float bvec2 bvec3 bvec4 vec2 vec3 vec4 ivec2 ivec3 ivec4
INDEX		-> [int]
DECLARATION 	-> TYPE id
ASSIGNMENT	-> id INDEX = EXPRESSION
EXPRESSION	-> VALUE INDEX
		-> EXPRESSION + EXPRESSION
		-> EXPRESSION - EXPRESSION
		-> EXPRESSION * EXPRESSION
		-> EXPRESSION / EXPRESSION
		-> (EXPRESSION)
		-> - EXPRESSION

		-> EXPRESSION COMPARION EXPRESSION
		-> EXPRESSION && EXPRESSION
		-> EXPRESSION || EXPRESSION
		-> !EXPRESSION

		-> EXPRESSION ^ EXPRESSION

STATEMENT_IF	-> if(EXPRESSION){instructions}
STATEMENT_ELSEIF-> STATEMENT_IF else STATEMENT_IF
		-> STATEMENT_ELSEIF else STATEMENT_IF
STATEMENT	-> STATEMENT_IF
		-> STATEMENT_ELSEIF
		-> STATEMENT_ELSEIF else { INSTRUCTIONS }
		-> STATEMENT_IF else { INSTRUCTIONS }
LOOP		-> while (EXPRESSION ){INSTRUCTIONS}


COMPARISON	-> == | != | >= | <= | > | < 
